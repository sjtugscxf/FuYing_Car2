###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        28/Jun/2017  11:22:43
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\GitHub_pository\FuYing_Car2\source\CCD.c
#    Command line =  
#        D:\GitHub_pository\FuYing_Car2\source\CCD.c -D LPLD_K60 -lCN
#        D:\GitHub_pository\FuYing_Car2\RAM\List\ -lB
#        D:\GitHub_pository\FuYing_Car2\RAM\List\ -o
#        D:\GitHub_pository\FuYing_Car2\RAM\Obj\ --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\GitHub_pository\FuYing_Car2\..\app\ -I
#        D:\GitHub_pository\FuYing_Car2\source\ -I
#        D:\GitHub_pository\FuYing_Car2\common\ -I
#        D:\GitHub_pository\FuYing_Car2\LPLD\ -I
#        D:\GitHub_pository\FuYing_Car2\LPLD\HW\ -I
#        D:\GitHub_pository\FuYing_Car2\LPLD\DEV\ -I
#        D:\GitHub_pository\FuYing_Car2\iar_config_files\ -Ol -I "C:\Program
#        Files (x86)\IAR Systems\Embedded Workbench 7.0\arm\CMSIS\Include\" -D
#        ARM_MATH_CM4
#    List file    =  D:\GitHub_pository\FuYing_Car2\RAM\List\CCD.lst
#    Object file  =  D:\GitHub_pository\FuYing_Car2\RAM\Obj\CCD.o
#
###############################################################################

D:\GitHub_pository\FuYing_Car2\source\CCD.c
      1          /*
      2          Arthor : Qian Qiyang (KisaragiAyanoo@twitter)
      3          Date : 2015/12/01
      4          License : MIT
      5          */
      6          
      7          #include "includes.h"
      8          
      9          
     10          
     11          // ===== Variables ======
     12          //---- GLOBAL ----
     13          

   \                                 In section .bss, align 4
     14          U8 ccd1_line[128];
   \                     ccd1_line:
   \   00000000                      DS8 128

   \                                 In section .bss, align 4
     15          U8 ccd2_line[128];
   \                     ccd2_line:
   \   00000000                      DS8 128
     16          
     17          //---- LOCAL ---
     18          
     19          
     20          
     21          // ===== Function Declaration ===== ( Local ) ( No need for users to use)
     22          
     23            // -- Basic Drivers --
     24          u32 AD_Sample_CCD1();
     25          u32 AD_Sample_CCD2();
     26          
     27            // --  Hardware Interface --
     28          void CCD1_SI(u8 x);
     29          void CCD2_SI(u8 x);
     30          void CCD1_CLK(u8 x);
     31          void CCD2_CLK(u8 x);
     32          
     33          
     34          
     35          // =======  Function Realization ======
     36          

   \                                 In section .text, align 4, keep-with-next
     37          void CCD1_GetLine(U8 * ccd_line)
     38          {
   \                     CCD1_GetLine: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     39            u8 i;
     40           	
     41            //Collect pixels.
     42            //Sned SI
     43            CCD1_SI(1);  //SI = 1, t = 0
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      BL       CCD1_SI
     44            
     45            asm("nop");asm("nop");
   \   0000000A   0xBF00             nop
   \   0000000C   0xBF00             nop
     46            
     47            CCD1_CLK(1); //CLK = 1, dt = 75ns
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       CCD1_CLK
     48            CCD1_SI(0);  //SI = 0, dt = 50ns
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      BL       CCD1_SI
     49            
     50            //First pixel.
     51            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
   \   0000001A   0xBF00             nop
   \   0000001C   0xBF00             nop
   \   0000001E   0xBF00             nop
   \   00000020   0xBF00             nop
   \   00000022   0xBF00             nop
     52            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
   \   00000024   0xBF00             nop
   \   00000026   0xBF00             nop
   \   00000028   0xBF00             nop
   \   0000002A   0xBF00             nop
   \   0000002C   0xBF00             nop
     53            
     54            ccd_line[0] = AD_Sample_CCD1();
   \   0000002E   0x.... 0x....      BL       AD_Sample_CCD1
   \   00000032   0x7020             STRB     R0,[R4, #+0]
     55            
     56            CCD1_CLK(0); //CLK = 0
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x.... 0x....      BL       CCD1_CLK
     57           
     58            //2~128 CLK
     59            for(i=1; i<128; i++)
   \   0000003A   0x2501             MOVS     R5,#+1
   \   0000003C   0xE01A             B.N      ??CCD1_GetLine_0
     60            {
     61              
     62              asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
   \                     ??CCD1_GetLine_1: (+1)
   \   0000003E   0xBF00             nop
   \   00000040   0xBF00             nop
   \   00000042   0xBF00             nop
   \   00000044   0xBF00             nop
   \   00000046   0xBF00             nop
   \   00000048   0xBF00             nop
     63              
     64              CCD1_CLK(1);  //CLK = 1, dt = 125ns
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0x.... 0x....      BL       CCD1_CLK
     65              
     66              asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
   \   00000050   0xBF00             nop
   \   00000052   0xBF00             nop
   \   00000054   0xBF00             nop
   \   00000056   0xBF00             nop
   \   00000058   0xBF00             nop
     67              asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
   \   0000005A   0xBF00             nop
   \   0000005C   0xBF00             nop
   \   0000005E   0xBF00             nop
   \   00000060   0xBF00             nop
   \   00000062   0xBF00             nop
     68              
     69              ccd_line[i] = AD_Sample_CCD1();
   \   00000064   0x.... 0x....      BL       AD_Sample_CCD1
   \   00000068   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000006A   0x5528             STRB     R0,[R5, R4]
     70              
     71              CCD1_CLK(0);  //CLK = 0.
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x.... 0x....      BL       CCD1_CLK
     72            }
   \   00000072   0x1C6D             ADDS     R5,R5,#+1
   \                     ??CCD1_GetLine_0: (+1)
   \   00000074   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000076   0x2D80             CMP      R5,#+128
   \   00000078   0xDBE1             BLT.N    ??CCD1_GetLine_1
     73           
     74            //129 CLK
     75            
     76            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
   \   0000007A   0xBF00             nop
   \   0000007C   0xBF00             nop
   \   0000007E   0xBF00             nop
   \   00000080   0xBF00             nop
   \   00000082   0xBF00             nop
   \   00000084   0xBF00             nop
     77            
     78            CCD1_CLK(1);  //CLK = 1.
   \   00000086   0x2001             MOVS     R0,#+1
   \   00000088   0x.... 0x....      BL       CCD1_CLK
     79            
     80            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
   \   0000008C   0xBF00             nop
   \   0000008E   0xBF00             nop
   \   00000090   0xBF00             nop
   \   00000092   0xBF00             nop
   \   00000094   0xBF00             nop
   \   00000096   0xBF00             nop
     81            
     82            CCD1_CLK(0);  //CLK = 0.
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0x.... 0x....      BL       CCD1_CLK
     83          }
   \   0000009E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     84          
     85          

   \                                 In section .text, align 4, keep-with-next
     86          void CCD2_GetLine(U8 * ccd_line)
     87          {
   \                     CCD2_GetLine: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     88            u8 i;
     89           	
     90            //Collect pixels.
     91            //Sned SI
     92            CCD2_SI(1);  //SI = 1, t = 0
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      BL       CCD2_SI
     93            
     94            asm("nop");asm("nop");
   \   0000000A   0xBF00             nop
   \   0000000C   0xBF00             nop
     95            
     96            CCD2_CLK(1); //CLK = 1, dt = 75ns
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       CCD2_CLK
     97            CCD2_SI(0);  //SI = 0, dt = 50ns
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      BL       CCD2_SI
     98            
     99            //First pixel.
    100            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
   \   0000001A   0xBF00             nop
   \   0000001C   0xBF00             nop
   \   0000001E   0xBF00             nop
   \   00000020   0xBF00             nop
   \   00000022   0xBF00             nop
    101            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
   \   00000024   0xBF00             nop
   \   00000026   0xBF00             nop
   \   00000028   0xBF00             nop
   \   0000002A   0xBF00             nop
   \   0000002C   0xBF00             nop
    102            
    103            ccd_line[0] = AD_Sample_CCD2();
   \   0000002E   0x.... 0x....      BL       AD_Sample_CCD2
   \   00000032   0x7020             STRB     R0,[R4, #+0]
    104            
    105            CCD2_CLK(0); //CLK = 0
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x.... 0x....      BL       CCD2_CLK
    106           
    107            //2~128 CLK
    108            for(i=1; i<128; i++)
   \   0000003A   0x2501             MOVS     R5,#+1
   \   0000003C   0xE01A             B.N      ??CCD2_GetLine_0
    109            {
    110              
    111              asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
   \                     ??CCD2_GetLine_1: (+1)
   \   0000003E   0xBF00             nop
   \   00000040   0xBF00             nop
   \   00000042   0xBF00             nop
   \   00000044   0xBF00             nop
   \   00000046   0xBF00             nop
   \   00000048   0xBF00             nop
    112              
    113              CCD2_CLK(1);  //CLK = 1, dt = 125ns
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0x.... 0x....      BL       CCD2_CLK
    114              
    115              asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
   \   00000050   0xBF00             nop
   \   00000052   0xBF00             nop
   \   00000054   0xBF00             nop
   \   00000056   0xBF00             nop
   \   00000058   0xBF00             nop
    116              asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
   \   0000005A   0xBF00             nop
   \   0000005C   0xBF00             nop
   \   0000005E   0xBF00             nop
   \   00000060   0xBF00             nop
   \   00000062   0xBF00             nop
    117              
    118              ccd_line[i] = AD_Sample_CCD2();
   \   00000064   0x.... 0x....      BL       AD_Sample_CCD2
   \   00000068   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000006A   0x5528             STRB     R0,[R5, R4]
    119              
    120              CCD2_CLK(0);  //CLK = 0.
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x.... 0x....      BL       CCD2_CLK
    121            }
   \   00000072   0x1C6D             ADDS     R5,R5,#+1
   \                     ??CCD2_GetLine_0: (+1)
   \   00000074   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000076   0x2D80             CMP      R5,#+128
   \   00000078   0xDBE1             BLT.N    ??CCD2_GetLine_1
    122           
    123            //129 CLK
    124            
    125            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
   \   0000007A   0xBF00             nop
   \   0000007C   0xBF00             nop
   \   0000007E   0xBF00             nop
   \   00000080   0xBF00             nop
   \   00000082   0xBF00             nop
   \   00000084   0xBF00             nop
    126            
    127            CCD2_CLK(1);  //CLK = 1.
   \   00000086   0x2001             MOVS     R0,#+1
   \   00000088   0x.... 0x....      BL       CCD2_CLK
    128            
    129            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
   \   0000008C   0xBF00             nop
   \   0000008E   0xBF00             nop
   \   00000090   0xBF00             nop
   \   00000092   0xBF00             nop
   \   00000094   0xBF00             nop
   \   00000096   0xBF00             nop
    130            
    131            CCD2_CLK(0);  //CLK = 0.
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0x.... 0x....      BL       CCD2_CLK
    132          }
   \   0000009E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    133          
    134            //  INIT 

   \                                 In section .text, align 2, keep-with-next
    135          void CCD_Init(){
    136            
    137            PORTB->PCR[20] |= PORT_PCR_MUX(1);    // 2 SI
   \                     CCD_Init: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable6  ;; 0x4004a050
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   00000008   0x....             LDR.N    R1,??DataTable6  ;; 0x4004a050
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    138            PORTB->PCR[21] |= PORT_PCR_MUX(1);    // 1 SI
   \   0000000C   0x....             LDR.N    R0,??DataTable6_1  ;; 0x4004a054
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   00000014   0x....             LDR.N    R1,??DataTable6_1  ;; 0x4004a054
   \   00000016   0x6008             STR      R0,[R1, #+0]
    139            PORTB->PCR[22] |= PORT_PCR_MUX(1);    // 2 CLK
   \   00000018   0x....             LDR.N    R0,??DataTable6_2  ;; 0x4004a058
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   00000020   0x....             LDR.N    R1,??DataTable6_2  ;; 0x4004a058
   \   00000022   0x6008             STR      R0,[R1, #+0]
    140            PORTB->PCR[23] |= PORT_PCR_MUX(1);    // 1 CLK
   \   00000024   0x....             LDR.N    R0,??DataTable6_3  ;; 0x4004a05c
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   0000002C   0x....             LDR.N    R1,??DataTable6_3  ;; 0x4004a05c
   \   0000002E   0x6008             STR      R0,[R1, #+0]
    141            PTB->PDDR |= (0xf<<20);
   \   00000030   0x....             LDR.N    R0,??DataTable6_4  ;; 0x400ff054
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0xF450 0x0070      ORRS     R0,R0,#0xF00000
   \   00000038   0x....             LDR.N    R1,??DataTable6_4  ;; 0x400ff054
   \   0000003A   0x6008             STR      R0,[R1, #+0]
    142            
    143            SIM->SCGC6 |= SIM_SCGC6_ADC0_MASK;//ADC0 Clock Enable
   \   0000003C   0x....             LDR.N    R0,??DataTable6_5  ;; 0x4004803c
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   00000044   0x....             LDR.N    R1,??DataTable6_5  ;; 0x4004803c
   \   00000046   0x6008             STR      R0,[R1, #+0]
    144            /*
    145            ADC0->CFG1 |= 0
    146                       //|ADC_CFG1_ADLPC_MASK
    147                       | ADC_CFG1_ADICLK(1)
    148                       | ADC_CFG1_MODE(0);
    149                       //| ADC_CFG1_ADIV(0);
    150            ADC0->CFG2 |= //ADC_CFG2_ADHSC_MASK |
    151                          ADC_CFG2_ADACKEN_MASK; 
    152            
    153            ADC0->SC1[0]&=~ADC_SC1_AIEN_MASK;//disenble interrupt
    154            
    155            PORTC->PCR[0]|=PORT_PCR_MUX(0);//adc0-14
    156            PORTC->PCR[1]|=PORT_PCR_MUX(0);//adc0-15
    157            */
    158              if(!ADC1_enabled){
   \   00000048   0x....             LDR.N    R0,??DataTable6_6
   \   0000004A   0x7800             LDRB     R0,[R0, #+0]
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD114             BNE.N    ??CCD_Init_0
    159              SIM->SCGC3 |= SIM_SCGC3_ADC1_MASK;  //ADC1 Clock Enable
   \   00000050   0x....             LDR.N    R0,??DataTable6_7  ;; 0x40048030
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   00000058   0x....             LDR.N    R1,??DataTable6_7  ;; 0x40048030
   \   0000005A   0x6008             STR      R0,[R1, #+0]
    160              ADC1->CFG1 |= 0
    161                         //|ADC_CFG1_ADLPC_MASK
    162                         | ADC_CFG1_ADICLK(1)
    163                         | ADC_CFG1_MODE(0)
    164                         | ADC_CFG1_ADIV(0);
   \   0000005C   0x....             LDR.N    R0,??DataTable6_8  ;; 0x400bb008
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000064   0x....             LDR.N    R1,??DataTable6_8  ;; 0x400bb008
   \   00000066   0x6008             STR      R0,[R1, #+0]
    165              ADC1->CFG2 |= //ADC_CFG2_ADHSC_MASK |
    166                            ADC_CFG2_ADACKEN_MASK;
   \   00000068   0x....             LDR.N    R0,??DataTable6_9  ;; 0x400bb00c
   \   0000006A   0x6800             LDR      R0,[R0, #+0]
   \   0000006C   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000070   0x....             LDR.N    R1,??DataTable6_9  ;; 0x400bb00c
   \   00000072   0x6008             STR      R0,[R1, #+0]
    167              ADC1_enabled = 1;
   \   00000074   0x2001             MOVS     R0,#+1
   \   00000076   0x....             LDR.N    R1,??DataTable6_6
   \   00000078   0x7008             STRB     R0,[R1, #+0]
    168            }
    169            
    170          }
   \                     ??CCD_Init_0: (+1)
   \   0000007A   0x4770             BX       LR               ;; return
    171          
    172          
    173          // ======= Basic Drivers ======
    174          

   \                                 In section .text, align 2, keep-with-next
    175          u32 AD_Sample_CCD1(){
    176            /*ADC0->SC1[0] = ADC_SC1_ADCH(15);
    177            while((ADC0->SC1[0]&ADC_SC1_COCO_MASK)==0);
    178            return ADC0->R[0];*/
    179            
    180            ADC1->SC1[0] = ADC_SC1_ADCH(15);
   \                     AD_Sample_CCD1: (+1)
   \   00000000   0x200F             MOVS     R0,#+15
   \   00000002   0x....             LDR.N    R1,??DataTable6_10  ;; 0x400bb000
   \   00000004   0x6008             STR      R0,[R1, #+0]
    181            while((ADC1->SC1[0]&ADC_SC1_COCO_MASK)==0);
   \                     ??AD_Sample_CCD1_0: (+1)
   \   00000006   0x....             LDR.N    R0,??DataTable6_10  ;; 0x400bb000
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x0600             LSLS     R0,R0,#+24
   \   0000000C   0xD5FB             BPL.N    ??AD_Sample_CCD1_0
    182            return ADC1->R[0];
   \   0000000E   0x....             LDR.N    R0,??DataTable6_11  ;; 0x400bb010
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x4770             BX       LR               ;; return
    183          }

   \                                 In section .text, align 2, keep-with-next
    184          u32 AD_Sample_CCD2(){
    185            ADC0->SC1[0] = ADC_SC1_ADCH(14);
   \                     AD_Sample_CCD2: (+1)
   \   00000000   0x200E             MOVS     R0,#+14
   \   00000002   0x....             LDR.N    R1,??DataTable6_12  ;; 0x4003b000
   \   00000004   0x6008             STR      R0,[R1, #+0]
    186            while((ADC0->SC1[0]&ADC_SC1_COCO_MASK)==0);
   \                     ??AD_Sample_CCD2_0: (+1)
   \   00000006   0x....             LDR.N    R0,??DataTable6_12  ;; 0x4003b000
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x0600             LSLS     R0,R0,#+24
   \   0000000C   0xD5FB             BPL.N    ??AD_Sample_CCD2_0
    187            return ADC0->R[0];
   \   0000000E   0x....             LDR.N    R0,??DataTable6_13  ;; 0x4003b010
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x4770             BX       LR               ;; return
    188          }
    189             
    190          // ===== Hardware Interface =====

   \                                 In section .text, align 2, keep-with-next
    191          void CCD1_SI(u8 x){
    192            if(x)
   \                     CCD1_SI: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD006             BEQ.N    ??CCD1_SI_0
    193              PTB->PSOR |= 1<<21;
   \   00000006   0x....             LDR.N    R0,??DataTable6_14  ;; 0x400ff044
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF450 0x1000      ORRS     R0,R0,#0x200000
   \   0000000E   0x....             LDR.N    R1,??DataTable6_14  ;; 0x400ff044
   \   00000010   0x6008             STR      R0,[R1, #+0]
   \   00000012   0xE005             B.N      ??CCD1_SI_1
    194            else
    195              PTB->PCOR |= 1<<21;
   \                     ??CCD1_SI_0: (+1)
   \   00000014   0x....             LDR.N    R0,??DataTable6_15  ;; 0x400ff048
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xF450 0x1000      ORRS     R0,R0,#0x200000
   \   0000001C   0x....             LDR.N    R1,??DataTable6_15  ;; 0x400ff048
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    196          }
   \                     ??CCD1_SI_1: (+1)
   \   00000020   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
    197          void CCD2_SI(u8 x){
    198            if(x)
   \                     CCD2_SI: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD006             BEQ.N    ??CCD2_SI_0
    199              PTB->PSOR |= 1<<20;
   \   00000006   0x....             LDR.N    R0,??DataTable6_14  ;; 0x400ff044
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF450 0x1080      ORRS     R0,R0,#0x100000
   \   0000000E   0x....             LDR.N    R1,??DataTable6_14  ;; 0x400ff044
   \   00000010   0x6008             STR      R0,[R1, #+0]
   \   00000012   0xE005             B.N      ??CCD2_SI_1
    200            else
    201              PTB->PCOR |= 1<<20;
   \                     ??CCD2_SI_0: (+1)
   \   00000014   0x....             LDR.N    R0,??DataTable6_15  ;; 0x400ff048
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xF450 0x1080      ORRS     R0,R0,#0x100000
   \   0000001C   0x....             LDR.N    R1,??DataTable6_15  ;; 0x400ff048
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    202          }
   \                     ??CCD2_SI_1: (+1)
   \   00000020   0x4770             BX       LR               ;; return
    203          

   \                                 In section .text, align 2, keep-with-next
    204          void CCD1_CLK(u8 x){
    205            if(x)
   \                     CCD1_CLK: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD006             BEQ.N    ??CCD1_CLK_0
    206              PTB->PSOR |= 1<<23;
   \   00000006   0x....             LDR.N    R0,??DataTable6_14  ;; 0x400ff044
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF450 0x0000      ORRS     R0,R0,#0x800000
   \   0000000E   0x....             LDR.N    R1,??DataTable6_14  ;; 0x400ff044
   \   00000010   0x6008             STR      R0,[R1, #+0]
   \   00000012   0xE005             B.N      ??CCD1_CLK_1
    207            else
    208              PTB->PCOR |= 1<<23;
   \                     ??CCD1_CLK_0: (+1)
   \   00000014   0x....             LDR.N    R0,??DataTable6_15  ;; 0x400ff048
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xF450 0x0000      ORRS     R0,R0,#0x800000
   \   0000001C   0x....             LDR.N    R1,??DataTable6_15  ;; 0x400ff048
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    209          }
   \                     ??CCD1_CLK_1: (+1)
   \   00000020   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
    210          void CCD2_CLK(u8 x){
    211            if(x)
   \                     CCD2_CLK: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD006             BEQ.N    ??CCD2_CLK_0
    212              PTB->PSOR |= 1<<22;
   \   00000006   0x....             LDR.N    R0,??DataTable6_14  ;; 0x400ff044
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF450 0x0080      ORRS     R0,R0,#0x400000
   \   0000000E   0x....             LDR.N    R1,??DataTable6_14  ;; 0x400ff044
   \   00000010   0x6008             STR      R0,[R1, #+0]
   \   00000012   0xE005             B.N      ??CCD2_CLK_1
    213            else
    214              PTB->PCOR |= 1<<22;
   \                     ??CCD2_CLK_0: (+1)
   \   00000014   0x....             LDR.N    R0,??DataTable6_15  ;; 0x400ff048
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xF450 0x0080      ORRS     R0,R0,#0x400000
   \   0000001C   0x....             LDR.N    R1,??DataTable6_15  ;; 0x400ff048
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    215          }
   \                     ??CCD2_CLK_1: (+1)
   \   00000020   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x4004A050         DC32     0x4004a050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x4004A054         DC32     0x4004a054

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x4004A058         DC32     0x4004a058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x4004A05C         DC32     0x4004a05c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x400FF054         DC32     0x400ff054

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x........         DC32     ADC1_enabled

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x40048030         DC32     0x40048030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x400BB008         DC32     0x400bb008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x400BB00C         DC32     0x400bb00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0x400BB000         DC32     0x400bb000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \   00000000   0x400BB010         DC32     0x400bb010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_12:
   \   00000000   0x4003B000         DC32     0x4003b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_13:
   \   00000000   0x4003B010         DC32     0x4003b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_14:
   \   00000000   0x400FF044         DC32     0x400ff044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_15:
   \   00000000   0x400FF048         DC32     0x400ff048
    216          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   AD_Sample_CCD1
       0   AD_Sample_CCD2
       0   CCD1_CLK
      16   CCD1_GetLine
        16   -> AD_Sample_CCD1
        16   -> CCD1_CLK
        16   -> CCD1_SI
       0   CCD1_SI
       0   CCD2_CLK
      16   CCD2_GetLine
        16   -> AD_Sample_CCD2
        16   -> CCD2_CLK
        16   -> CCD2_SI
       0   CCD2_SI
       0   CCD_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_13
       4  ??DataTable6_14
       4  ??DataTable6_15
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
      20  AD_Sample_CCD1
      20  AD_Sample_CCD2
      34  CCD1_CLK
     160  CCD1_GetLine
      34  CCD1_SI
      34  CCD2_CLK
     160  CCD2_GetLine
      34  CCD2_SI
     124  CCD_Init
     128  ccd1_line
     128  ccd2_line

 
 256 bytes in section .bss
 684 bytes in section .text
 
 684 bytes of CODE memory
 256 bytes of DATA memory

Errors: none
Warnings: none
