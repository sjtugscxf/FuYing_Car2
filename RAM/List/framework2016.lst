###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        28/Jun/2017  11:22:44
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\GitHub_pository\FuYing_Car2\source\framework2016.c
#    Command line =  
#        D:\GitHub_pository\FuYing_Car2\source\framework2016.c -D LPLD_K60 -lCN
#        D:\GitHub_pository\FuYing_Car2\RAM\List\ -lB
#        D:\GitHub_pository\FuYing_Car2\RAM\List\ -o
#        D:\GitHub_pository\FuYing_Car2\RAM\Obj\ --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\GitHub_pository\FuYing_Car2\..\app\ -I
#        D:\GitHub_pository\FuYing_Car2\source\ -I
#        D:\GitHub_pository\FuYing_Car2\common\ -I
#        D:\GitHub_pository\FuYing_Car2\LPLD\ -I
#        D:\GitHub_pository\FuYing_Car2\LPLD\HW\ -I
#        D:\GitHub_pository\FuYing_Car2\LPLD\DEV\ -I
#        D:\GitHub_pository\FuYing_Car2\iar_config_files\ -Ol -I "C:\Program
#        Files (x86)\IAR Systems\Embedded Workbench 7.0\arm\CMSIS\Include\" -D
#        ARM_MATH_CM4
#    List file    =  D:\GitHub_pository\FuYing_Car2\RAM\List\framework2016.lst
#    Object file  =  D:\GitHub_pository\FuYing_Car2\RAM\Obj\framework2016.o
#
###############################################################################

D:\GitHub_pository\FuYing_Car2\source\framework2016.c
      1          /*
      2          Arthor : Qian Qiyang (KisaragiAyanoo@twitter)
      3          Date : 2015/12/01
      4          License : MIT
      5          */
      6          
      7          
      8          #include "includes.h"
      9          
     10          

   \                                 In section .bss, align 1
     11          U8 ADC0_enabled = 0;
   \                     ADC0_enabled:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     12          U8 ADC1_enabled = 0;//not used
   \                     ADC1_enabled:
   \   00000000                      DS8 1
     13          

   \                                 In section .text, align 2, keep-with-next
     14          void main (void)
     15          {
   \                     main: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     16            
     17            // --- System Initiate ---
     18            
     19            __disable_irq();
   \   00000002   0xB672             CPSID    I
     20            
     21            HMI_Init();
   \   00000004   0x.... 0x....      BL       HMI_Init
     22            PIT0_Init(PIT0_PERIOD_US);
   \   00000008   0xF640 0x10C4      MOVW     R0,#+2500
   \   0000000C   0x.... 0x....      BL       PIT0_Init
     23            PIT1_Init(PIT1_PERIOD_US);
   \   00000010   0xF644 0x6020      MOVW     R0,#+20000
   \   00000014   0x.... 0x....      BL       PIT1_Init
     24            PIT2_Init();
   \   00000018   0x.... 0x....      BL       PIT2_Init
     25            
     26            UART_Init(115200);
   \   0000001C   0xF45F 0x30E1      MOVS     R0,#+115200
   \   00000020   0x.... 0x....      BL       UART_Init
     27            
     28            Motor_Init();
   \   00000024   0x.... 0x....      BL       Motor_Init
     29            Tacho_Init();
   \   00000028   0x.... 0x....      BL       Tacho_Init
     30            Servo_Init();
   \   0000002C   0x.... 0x....      BL       Servo_Init
     31            PID_Init(); 
   \   00000030   0x.... 0x....      BL       PID_Init
     32            Cam_B_Init();//≥ı ºªØCam_B
   \   00000034   0x.... 0x....      BL       Cam_B_Init
     33            
     34          #if (CAR_TYPE==0)   // Magnet and Balance
     35            
     36            Mag_Init();
     37            LPLD_MMA8451_Init();
     38            Gyro_Init();
     39            
     40          #elif (CAR_TYPE==1)     // CCD
     41            
     42            CCD_Init();
     43            
     44          #else               // Camera
     45            
     46            Cam_Init();
   \   00000038   0x.... 0x....      BL       Cam_Init
     47            CCD_Init();
   \   0000003C   0x.... 0x....      BL       CCD_Init
     48          #endif
     49            
     50            //---  Press Key 1 to Continue ---
     51            Oled_Putstr(6,1,"Press Key1 to go on");
   \   00000040   0x....             LDR.N    R2,??DataTable4
   \   00000042   0x2101             MOVS     R1,#+1
   \   00000044   0x2006             MOVS     R0,#+6
   \   00000046   0x.... 0x....      BL       Oled_Putstr
     52            while (Key1());
   \                     ??main_0: (+1)
   \   0000004A   0x....             LDR.N    R0,??DataTable4_1  ;; 0x400ff010
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \   0000004E   0xF3C0 0x2000      UBFX     R0,R0,#+8,#+1
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD1F9             BNE.N    ??main_0
     53            Oled_Clear();
   \   00000056   0x.... 0x....      BL       Oled_Clear
     54          
     55            __enable_irq();
   \   0000005A   0xB662             CPSIE    I
     56            
     57            // --- System Initiated ---   
     58            while(1)
     59            {
     60              set_car_state();
   \                     ??main_1: (+1)
   \   0000005C   0x.... 0x....      BL       set_car_state
     61              set_oled_menu();
   \   00000060   0x.... 0x....      BL       set_oled_menu
     62              if(car_state!=0)
   \   00000064   0x....             LDR.N    R0,??DataTable4_2
   \   00000066   0x7800             LDRB     R0,[R0, #+0]
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD001             BEQ.N    ??main_2
     63                Cam_B();
   \   0000006C   0x.... 0x....      BL       Cam_B
     64              Cam_Algorithm();
   \                     ??main_2: (+1)
   \   00000070   0x.... 0x....      BL       Cam_Algorithm
   \   00000074   0xE7F2             B.N      ??main_1
     65            }
     66          
     67          }
     68          
     69          
     70          
     71          
     72          // ===== System Interrupt Handler  ==== ( No Need to Edit )
     73          

   \                                 In section .text, align 2, keep-with-next
     74          void BusFault_Handler(){
   \                     BusFault_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     75            Oled_Clear();
   \   00000002   0x.... 0x....      BL       Oled_Clear
     76            Oled_Putstr(1,5,"Bus Fault");
   \   00000006   0x....             LDR.N    R2,??DataTable4_3
   \   00000008   0x2105             MOVS     R1,#+5
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       Oled_Putstr
     77            Oled_Putstr(4,1,"press Key1 to goon");
   \   00000010   0x....             LDR.N    R2,??DataTable4_4
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0x.... 0x....      BL       Oled_Putstr
     78            while(Key1());
   \                     ??BusFault_Handler_0: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable4_1  ;; 0x400ff010
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF3C0 0x2000      UBFX     R0,R0,#+8,#+1
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD1F9             BNE.N    ??BusFault_Handler_0
     79            
     80            return;
   \   00000026   0xBD01             POP      {R0,PC}          ;; return
     81          }
     82          
     83          

   \                                 In section .text, align 2, keep-with-next
     84          void NMI_Handler(){
   \                     NMI_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     85            Oled_Clear();
   \   00000002   0x.... 0x....      BL       Oled_Clear
     86            Oled_Putstr(1,5,"NMI Fault");
   \   00000006   0x....             LDR.N    R2,??DataTable4_5
   \   00000008   0x2105             MOVS     R1,#+5
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       Oled_Putstr
     87            Oled_Putstr(4,1,"press Key1 to goon");
   \   00000010   0x....             LDR.N    R2,??DataTable4_4
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0x.... 0x....      BL       Oled_Putstr
     88            while(Key1());
   \                     ??NMI_Handler_0: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable4_1  ;; 0x400ff010
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF3C0 0x2000      UBFX     R0,R0,#+8,#+1
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD1F9             BNE.N    ??NMI_Handler_0
     89            
     90            return;
   \   00000026   0xBD01             POP      {R0,PC}          ;; return
     91          }
     92          

   \                                 In section .text, align 2, keep-with-next
     93          void HardFault_Handler(void)
     94          {
   \                     HardFault_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     95            Oled_Clear();
   \   00000002   0x.... 0x....      BL       Oled_Clear
     96            Oled_Putstr(1,5,"Hard Fault");
   \   00000006   0x....             LDR.N    R2,??DataTable4_6
   \   00000008   0x2105             MOVS     R1,#+5
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       Oled_Putstr
     97            Oled_Putstr(4,1,"press Key1 to goon");
   \   00000010   0x....             LDR.N    R2,??DataTable4_4
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0x.... 0x....      BL       Oled_Putstr
     98            while(Key1());
   \                     ??HardFault_Handler_0: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable4_1  ;; 0x400ff010
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF3C0 0x2000      UBFX     R0,R0,#+8,#+1
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD1F9             BNE.N    ??HardFault_Handler_0
     99            
    100            return;
   \   00000026   0xBD01             POP      {R0,PC}          ;; return
    101          }
    102          
    103          

   \                                 In section .text, align 2, keep-with-next
    104          void DefaultISR(void)
    105          {
   \                     DefaultISR: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    106            Oled_Clear();
   \   00000002   0x.... 0x....      BL       Oled_Clear
    107            Oled_Putstr(1,5,"Default ISR");
   \   00000006   0x....             LDR.N    R2,??DataTable4_7
   \   00000008   0x2105             MOVS     R1,#+5
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       Oled_Putstr
    108            Oled_Putstr(4,2,"press Key1 to goon");
   \   00000010   0x....             LDR.N    R2,??DataTable4_4
   \   00000012   0x2102             MOVS     R1,#+2
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0x.... 0x....      BL       Oled_Putstr
    109            while(Key1());
   \                     ??DefaultISR_0: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable4_1  ;; 0x400ff010
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF3C0 0x2000      UBFX     R0,R0,#+8,#+1
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD1F9             BNE.N    ??DefaultISR_0
    110          
    111            return;
   \   00000026   0xBD01             POP      {R0,PC}          ;; return
    112          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x400FF010         DC32     0x400ff010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     car_state

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x50 0x72          DC8 "Press Key1 to go on"
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x4B 0x65    
   \              0x79 0x31    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x67 0x6F    
   \              0x20 0x6F    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x42 0x75          DC8 "Bus Fault"
   \              0x73 0x20    
   \              0x46 0x61    
   \              0x75 0x6C    
   \              0x74 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x70 0x72          DC8 "press Key1 to goon"
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x4B 0x65    
   \              0x79 0x31    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x67 0x6F    
   \              0x6F 0x6E    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x4E 0x4D          DC8 "NMI Fault"
   \              0x49 0x20    
   \              0x46 0x61    
   \              0x75 0x6C    
   \              0x74 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x48 0x61          DC8 "Hard Fault"
   \              0x72 0x64    
   \              0x20 0x46    
   \              0x61 0x75    
   \              0x6C 0x74    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x44 0x65          DC8 "Default ISR"
   \              0x66 0x61    
   \              0x75 0x6C    
   \              0x74 0x20    
   \              0x49 0x53    
   \              0x52 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   BusFault_Handler
         8   -> Oled_Clear
         8   -> Oled_Putstr
       8   DefaultISR
         8   -> Oled_Clear
         8   -> Oled_Putstr
       8   HardFault_Handler
         8   -> Oled_Clear
         8   -> Oled_Putstr
       8   NMI_Handler
         8   -> Oled_Clear
         8   -> Oled_Putstr
       8   main
         8   -> CCD_Init
         8   -> Cam_Algorithm
         8   -> Cam_B
         8   -> Cam_B_Init
         8   -> Cam_Init
         8   -> HMI_Init
         8   -> Motor_Init
         8   -> Oled_Clear
         8   -> Oled_Putstr
         8   -> PID_Init
         8   -> PIT0_Init
         8   -> PIT1_Init
         8   -> PIT2_Init
         8   -> Servo_Init
         8   -> Tacho_Init
         8   -> UART_Init
         8   -> set_car_state
         8   -> set_oled_menu


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
      20  ?_0
      12  ?_1
      20  ?_2
      12  ?_3
      12  ?_4
      12  ?_5
       1  ADC0_enabled
       1  ADC1_enabled
      40  BusFault_Handler
      40  DefaultISR
      40  HardFault_Handler
      40  NMI_Handler
     118  main

 
   2 bytes in section .bss
  88 bytes in section .rodata
 310 bytes in section .text
 
 310 bytes of CODE  memory
  88 bytes of CONST memory
   2 bytes of DATA  memory

Errors: none
Warnings: 1
